#!/usr/bin/env python3
"""
TikTok Bot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞—Ä—ñ–∑–∞–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—ñ–≤ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É TikTok
"""

import os
import logging
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
import json
from typing import List, Dict, Optional
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('tiktok_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class VideoProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—ñ–≤"""
    
    def __init__(self, input_dir: str = "Serial", output_dir: str = "clips"):
        self.input_dir = Path(input_dir)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
    def get_video_files(self) -> List[Path]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—ñ–≤"""
        video_extensions = ['.mkv', '.mp4', '.avi', '.mov', '.wmv']
        video_files = []
        
        for ext in video_extensions:
            video_files.extend(self.input_dir.glob(f"*{ext}"))
            
        return sorted(video_files)
    
    def cut_video_to_clips(self, video_path: Path, clip_duration: int = 60) -> List[Path]:
        """
        –ù–∞—Ä—ñ–∑–∞—Ç–∏ –≤—ñ–¥–µ–æ –Ω–∞ –∫–ª—ñ–ø–∏ –∑–∞–¥–∞–Ω–æ—ó —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
        
        Args:
            video_path: –®–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É
            clip_duration: –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫–ª—ñ–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 60—Å)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —à–ª—è—Ö—ñ–≤ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–ª—ñ–ø—ñ–≤
        """
        try:
            import ffmpeg
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ
            probe = ffmpeg.probe(str(video_path))
            
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            duration = None
            if 'format' in probe and 'duration' in probe['format']:
                duration = float(probe['format']['duration'])
            else:
                for stream in probe['streams']:
                    if stream['codec_type'] == 'video' and 'duration' in stream:
                        duration = float(stream['duration'])
                        break
                        
            if duration is None:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ {video_path}")
                return []
            
            clips = []
            clip_count = int(duration // clip_duration)
            
            base_name = video_path.stem
            logger.info(f"–ù–∞—Ä—ñ–∑–∞–Ω–Ω—è {video_path.name} –Ω–∞ {clip_count} –∫–ª—ñ–ø—ñ–≤")
            
            for i in range(clip_count):
                start_time = i * clip_duration
                output_name = f"{base_name}_clip_{i+1:03d}.mp4"
                output_path = self.output_dir / output_name
                
                # –ù–∞—Ä—ñ–∑–∞—Ç–∏ –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é FFmpeg
                (
                    ffmpeg
                    .input(str(video_path), ss=start_time, t=clip_duration)
                    .output(
                        str(output_path),
                        vcodec='libx264',
                        acodec='aac',
                        video_bitrate='2M',
                        audio_bitrate='128k',
                        vf='scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920',  # TikTok —Ä–æ–∑–º—ñ—Ä 9:16
                        r=30  # 30 FPS –¥–ª—è TikTok
                    )
                    .overwrite_output()
                    .run(quiet=True)
                )
                
                if output_path.exists():
                    clips.append(output_path)
                    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ–ø: {output_name}")
                
            return clips
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ä—ñ–∑–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ {video_path}: {e}")
            return []


class TikTokUploader:
    """–ö–ª–∞—Å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ —É TikTok —á–µ—Ä–µ–∑ API"""
    
    def __init__(self, config_file: str = "tiktok_config.json"):
        self.config_file = config_file
        self.load_config()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API –∫–ª—ñ—î–Ω—Ç
        from tiktok_api import TikTokAPIClient
        self.api_client = TikTokAPIClient()
        
    def load_config(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é TikTok"""
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        else:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            self.config = {
                "hashtags": [
                    "#—Å–µ—Ä—ñ–∞–ª", "#–≥—ñ–Ω–Ω—ñ–¥–∂–æ—Ä–¥–∂—ñ—è", "#netflix", "#–≤—ñ–¥–µ–æ"
                ],
                "description_templates": [
                    "–ù–∞–π–∫—Ä–∞—â—ñ –º–æ–º–µ–Ω—Ç–∏ –∑ —Å–µ—Ä—ñ–∞–ª—É! üî•",
                    "–¶–µ –±—É–ª–æ –µ–ø—ñ—á–Ω–æ! üò±",
                    "–•—Ç–æ —â–µ –¥–∏–≤–∏—Ç—å—Å—è —Ü–µ–π —Å–µ—Ä—ñ–∞–ª? üíï",
                    "–í–∞—à–∞ —Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ —Ü—é —Å—Ü–µ–Ω—É? ü§î"
                ],
                "privacy_level": "PUBLIC_TO_EVERYONE"
            }
            self.save_config()
            
    def save_config(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
    
    def generate_description(self, video_path: Path) -> str:
        """
        –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Å –≤—ñ–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
        
        Args:
            video_path: –®–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É
            
        Returns:
            –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å
        """
        filename = video_path.stem
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
        # (–ø—Ä–∏–∫–ª–∞–¥: "Ginny & Georgia. S03 E01. (Title)_clip_001")
        series_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–µ—Ä—ñ–∞–ª"
        season = ""
        episode = ""
        clip_number = ""
        
        try:
            # –í–∏—Ç—è–≥—Ç–∏ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É (–¥–æ –ø–µ—Ä—à–æ—ó –∫—Ä–∞–ø–∫–∏)
            if "." in filename:
                series_name = filename.split(".")[0].strip()
            
            # –ó–Ω–∞–π—Ç–∏ —Å–µ–∑–æ–Ω —ñ –µ–ø—ñ–∑–æ–¥ (S03 E01)
            import re
            season_match = re.search(r'S(\d+)', filename)
            episode_match = re.search(r'E(\d+)', filename)
            clip_match = re.search(r'clip_(\d+)', filename)
            
            if season_match:
                season = f"S{season_match.group(1)}"
            if episode_match:
                episode = f"E{episode_match.group(1)}"
            if clip_match:
                clip_number = f"—á–∞—Å—Ç–∏–Ω–∞ {clip_match.group(1)}"
                
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É: {e}")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–∏—Å
        description_parts = []
        
        # –î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É
        if series_name != "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–µ—Ä—ñ–∞–ª":
            description_parts.append(f"üé¨ {series_name}")
        
        # –î–æ–¥–∞—Ç–∏ —Å–µ–∑–æ–Ω —Ç–∞ –µ–ø—ñ–∑–æ–¥
        if season and episode:
            description_parts.append(f"üì∫ {season} {episode}")
        
        # –î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–ª—ñ–ø—É
        if clip_number:
            description_parts.append(f"üéûÔ∏è {clip_number}")
        
        # –î–æ–¥–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —à–∞–±–ª–æ–Ω
        template = random.choice(self.config["description_templates"])
        description_parts.append(template)
        
        # –ü–æ—î–¥–Ω–∞—Ç–∏ –≤—Å–µ
        description = " | ".join(description_parts)
        
        # –î–æ–¥–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏
        hashtags = " ".join(self.config["hashtags"])
        if hashtags:
            description += f"\n\n{hashtags}"
        
        return description
    async def upload_video(self, video_path: Path,
                           description: str = None) -> bool:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ —É TikTok —á–µ—Ä–µ–∑ API
        
        Args:
            video_path: –®–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É
            description: –û–ø–∏—Å –≤—ñ–¥–µ–æ
            
        Returns:
            True —è–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
            if not self.api_client.is_authenticated():
                logger.error(
                    "API –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å setup_tiktok_api.py"
                )
                return False
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–∏—Å —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π
            if not description:
                description = self.generate_description(video_path)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—É
            title = video_path.stem
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ API
            result = self.api_client.upload_video(
                video_path=str(video_path),
                title=title,
                description=description,
                privacy_level=self.config.get("privacy_level", "SELF_ONLY")
            )
            
            if result:
                logger.info(f"–í—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {video_path.name}")
                return True
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {video_path.name}")
                return False
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ {video_path}: {e}")
            return False


class ScheduleManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥–æ–º –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π"""
    
    def __init__(self, schedule_file: str = "schedule.json"):
        self.schedule_file = schedule_file
        self.load_schedule()
        
    def load_schedule(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"""
        if os.path.exists(self.schedule_file):
            with open(self.schedule_file, 'r', encoding='utf-8') as f:
                self.schedule = json.load(f)
        else:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ (3-4 –≤—ñ–¥–µ–æ –Ω–∞ –¥–µ–Ω—å)
            self.schedule = {
                "posts_per_day": 3,
                "posting_times": ["09:00", "15:00", "21:00"],
                "last_upload": None,
                "queue": []
            }
            self.save_schedule()
            
    def save_schedule(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"""
        with open(self.schedule_file, 'w', encoding='utf-8') as f:
            json.dump(self.schedule, f, indent=2, ensure_ascii=False)
    
    def add_videos_to_queue(self, video_paths: List[Path]):
        """–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ –¥–æ —á–µ—Ä–≥–∏"""
        for video_path in video_paths:
            self.schedule["queue"].append(str(video_path))
        self.save_schedule()
        logger.info(f"–î–æ–¥–∞–Ω–æ {len(video_paths)} –≤—ñ–¥–µ–æ –¥–æ —á–µ—Ä–≥–∏")
    
    def get_next_upload_time(self) -> datetime:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
        now = datetime.now()
        posting_times = self.schedule["posting_times"]
        
        # –ó–Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—å–æ–≥–æ–¥–Ω—ñ
        for time_str in posting_times:
            hour, minute = map(int, time_str.split(':'))
            upload_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            if upload_time > now:
                return upload_time
                
        # –Ø–∫—â–æ –≤—Å—ñ —á–∞—Å–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–æ–π—à–ª–∏, –≤–∑—è—Ç–∏ –ø–µ—Ä—à–∏–π —á–∞—Å –∑–∞–≤—Ç—Ä–∞
        hour, minute = map(int, posting_times[0].split(':'))
        tomorrow = now + timedelta(days=1)
        return tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
    
    def should_upload_now(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑"""
        if not self.schedule["queue"]:
            return False
            
        now = datetime.now()
        next_time = self.get_next_upload_time()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —è–∫—â–æ —Ä—ñ–∑–Ω–∏—Ü—è –º–µ–Ω—à–µ 5 —Ö–≤–∏–ª–∏–Ω
        return abs((next_time - now).total_seconds()) < 300


class TikTokBot:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.processor = VideoProcessor()
        self.uploader = TikTokUploader()
        self.scheduler = ScheduleManager()
        
    async def process_all_videos(self):
        """–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ —á–µ—Ä–≥–∏"""
        video_files = self.processor.get_video_files()
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(video_files)} –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—ñ–≤")
        
        all_clips = []
        for video_file in video_files:
            clips = self.processor.cut_video_to_clips(video_file)
            all_clips.extend(clips)
            
        if all_clips:
            self.scheduler.add_videos_to_queue(all_clips)
            logger.info(f"–í—Å—å–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ {len(all_clips)} –∫–ª—ñ–ø—ñ–≤")
            
    async def upload_scheduled_videos(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ –∑–≥—ñ–¥–Ω–æ —Ä–æ–∑–∫–ª–∞–¥—É"""
        if self.scheduler.should_upload_now() and self.scheduler.schedule["queue"]:
            video_path = Path(self.scheduler.schedule["queue"].pop(0))
            
            if video_path.exists():
                success = await self.uploader.upload_video(video_path)
                if success:
                    self.scheduler.schedule["last_upload"] = datetime.now().isoformat()
                    self.scheduler.save_schedule()
                else:
                    # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ –≤ —á–µ—Ä–≥—É —è–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
                    self.scheduler.schedule["queue"].insert(0, str(video_path))
                    self.scheduler.save_schedule()
            else:
                logger.warning(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {video_path}")
                
    async def run_continuous(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –≤ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ"""
        logger.info("–ó–∞–ø—É—Å–∫ TikTok –±–æ—Ç–∞...")
        
        while True:
            try:
                await self.upload_scheduled_videos()
                await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                
            except KeyboardInterrupt:
                logger.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                await asyncio.sleep(60)  # –ß–µ–∫–∞—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    bot = TikTokBot()
    await bot.run_continuous()


if __name__ == "__main__":
    asyncio.run(main())
