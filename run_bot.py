#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫—É —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è TikTok –±–æ—Ç–æ–º
"""

import asyncio
import sys
import argparse
from pathlib import Path
import logging

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from tiktok_bot import TikTokBot

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def process_videos():
    """–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—ñ–ø–∏"""
    logger.info("üé¨ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ...")
    bot = TikTokBot()
    await bot.process_all_videos()
    logger.info("‚úÖ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


async def run_bot():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –≤ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ TikTok –±–æ—Ç–∞...")
    bot = TikTokBot()
    await bot.run_continuous()


async def post_now():
    """–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ –∑ —á–µ—Ä–≥–∏ –∑–∞—Ä–∞–∑"""
    logger.info("üöÄ –ú–∏—Ç—Ç—î–≤–∏–π –ø–æ—Å—Ç–∏–Ω–≥...")
    bot = TikTokBot()
    
    if not bot.scheduler.schedule["queue"]:
        logger.warning("‚ùå –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è! –°–ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±—ñ—Ç—å –≤—ñ–¥–µ–æ.")
        return
    
    video_path = Path(bot.scheduler.schedule["queue"][0])
    if not video_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {video_path}")
        return
    
    success = await bot.uploader.upload_video(video_path)
    if success:
        # –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —á–µ—Ä–≥–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        bot.scheduler.schedule["queue"].pop(0)
        bot.scheduler.save_schedule()
        logger.info(f"‚úÖ –í—ñ–¥–µ–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {video_path.name}")
    else:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ")


async def post_specific(file_path: str):
    """–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ñ–∞–π–ª"""
    logger.info(f"üéØ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ñ–∞–π–ª—É: {file_path}")
    bot = TikTokBot()
    
    video_path = Path(file_path)
    if not video_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {video_path}")
        return
    
    success = await bot.uploader.upload_video(video_path)
    if success:
        logger.info(f"‚úÖ –í—ñ–¥–µ–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {video_path.name}")
    else:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ")


def setup_project():
    """–ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É"""
    logger.info("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É...")
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏
    folders = ['clips', 'logs', 'sessions']
    for folder in folders:
        Path(folder).mkdir(exist_ok=True)
        logger.info(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {folder}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä—ñ–∞–ª—ñ–≤
    serial_folder = Path("Serial")
    if not serial_folder.exists():
        logger.warning("‚ö†Ô∏è  –ü–∞–ø–∫–∞ 'Serial' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°—Ç–≤–æ—Ä—é—î–º–æ...")
        serial_folder.mkdir(exist_ok=True)
        logger.info("üìÇ –°–∫–æ–ø—ñ—é–π—Ç–µ –≤–∞—à—ñ —Å–µ—Ä—ñ–∞–ª–∏ —É –ø–∞–ø–∫—É 'Serial'")
    else:
        video_files = list(serial_folder.glob("*.mkv"))
        logger.info(f"üì∫ –ó–Ω–∞–π–¥–µ–Ω–æ {len(video_files)} –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—ñ–≤")
    
    logger.info("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description='TikTok Bot')
    parser.add_argument(
        'command',
        choices=['setup', 'process', 'run', 'post', 'upload'],
        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'
    )
    parser.add_argument(
        '--file',
        help='–®–ª—è—Ö –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'
    )
    
    args = parser.parse_args()
    
    try:
        if args.command == 'setup':
            setup_project()
        elif args.command == 'process':
            asyncio.run(process_videos())
        elif args.command == 'run':
            asyncio.run(run_bot())
        elif args.command == 'post':
            asyncio.run(post_now())
        elif args.command == 'upload':
            if args.file:
                asyncio.run(post_specific(args.file))
            else:
                logger.error("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥–∏ 'upload' –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ --file")
                sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("\nüëã –ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏...")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
